// Test file

import random;
import math;
//import complex;
//import List;

//module main;

var xspace = Int.make(102);
print xspace + 10;
print Int.add(xspace, 10);

var fspace = Float.make(92);
print fspace;

print Namespace;
var math1 = Namespace.make();
print math1;
math1.PI = 3.14159;
var pi = math1.PI;
print 2 * pi;

print random.x1;
print random.tf;

print math.cos(60.0*math1.PI/180);
print math.sin(30.0*math1.PI/180);
print math.tan(45.0*math1.PI/180);
print math.sqrt(25);

//var myfun1 = lambda (x, y) => x + y;
//print myfun1(8, 32);

//var myfun2 = null;
//myfun2 = lambda (x, y) => x + y;
//print myfun2(4, 6);

//print random;


print Class;
var rrr = Class.make;

print Null;
print Unit;
print Bool;
print Int;
//print Float;
//print Function;
//print NativeFunction;

var atest = Int.make(1024);
print atest;

print Int.toString(atest);

// Test Null type
print null;
print !null;
print !!null;

// Test Bool type
print true;
print false;
print !true;
print !false;
print true | true;
print true | false;
print true ^ true;
print true ^ false;
print true & true;
print true & false;
print false | true;
print false | false;
print false ^ true;
print false ^ false;
print false & true;
print false & false;

print 1 + 2;
print 1 - 2;
print 1 * 2;
print 1 / 2;
print -1;
print ~1;
print !1;
print 8 << 1;
print 8 >> 1;
print 1 > 2;
print 1 < 2;
print 1 >= 2;
print 1 <= 2;

print 1 == 1;
print 1 == 2;
print 1 != 1;
print 1 != 2;

print 1 | 2;
print 1 ^ 2;
print 1 & 2;

print 1 > 1.5;

print 1.2 + 2.0;
print 1.2 - 2.0;
print 1.2 * 2.0;
print 1.2 / 2.0;
print -1.2;
print !1.2;
print 1.2 > 2.0;
print 1.2 < 2.0;
print 1.2 >= 2.0;
print 1.2 <= 2.0;


//print "Hello " + "world!";

//var rf = tf + x1;

//print rf;

//print m11 - m12;


//var li = List.make(1);
//li.prepend(2);

//print List;
//print li;

//var x = 1;

//x = 12;

//print x;

//x.a = 15;
//x.b = 23;

//print x.a;
//print x.b;

//x.a.m = 10;

//var t = x.a.m;

//print t;

//class Comp {
//  var real = 3;
//  var imag = 4;
//  var init = lambda (x, y) => x * y;
//  def fn (x) = { x + 1; }
//}

//print Comp;
//print Comp.real;
//print Comp.imag;
//print Comp.init(30, 41);

// Define class

// Create object
//var z = Complex.make(3, 4);
//print z.real;
//print z.imag;

// Create another object
//var zp = Complex.make(2, 8);
//print zp.real;
//print zp.imag;

// Add in place
// z.add(zp) should be the same as Complex.add(z, zp)
//Complex.add(z, zp);
//z.add(zp);
//print z.real;
//print z.imag;

//print z.mag();
//print z.double();


//val n = 4;

//var z = 0;

//for (z = 0 to n-1) {
//  print z;
//};

//var r = 115;
//var q = 120;

//def myfun (x) = x + 1;

//print myfun(5);

//object math {
//  var pi = 3.14;
//  def myfun (k) = { k + 1 + this.pi; }
//}

//var t = math.myfun(2);
//print t;

//object Dog {
//  var x = 1024;
//  var y = 2 * math.pi;
//  var z = 2 * this.x;

//  def myfun (x) = x + r + this.y;
//  var a = 1;
//}

//print Dog;
//print Dog.x;
//print Dog.y;
//print Dog.z;

//print Dog.myfun(32);

//object Number {
//  def add (self, x) = self.value + x.value1;
//}

//object num1 {
//  var value = 14;
//}

//object num2 {
//  var value = 8;
//}

//var t = Number.add(num1, num2);
//print t;

//object Cat {
//  val t = 248;
//  def add (x, y) = x + y;
//  def sub (x, y) = x - y;
//}

//print Cat;

//print Cat.t;

//print Cat.add(128, 64);

//print Cat.sub(32, 8);

//print 1000;

//class Cow {}



//do {
//  x = 50;
//} while (x < 10);

//print x;


//var y = 10;

//while (y < 10) {
//  y = 50;
//};

//print y;





// var s = [1, 2.1, 3, 4, 5];

//var s = [2, 3];
//print s;

//var t = 1;
//print t;

//var t0 = "hello";
//var t1 = " world!";

//print t0 + t1;

//var a = 1;

//var b = 81;
//print b;


//def celsiusToFarenheit (x) = x * 1.8 + 32;

//val x1 = celsiusToFarenheit(0);
//print x1;

//val x2 = celsiusToFarenheit(100);
//print x2;

//{
//  x * 1.8 + 32;
//}

//def add2 (x, y) = {
//  x + y;
//};

//val k = add2(300, 65);
//print k;

// lambda function
// var fn = lambda (x) => x + 1;;

// var g = 1;

//{
//  var c = 100;
//  {
//    10 + 2;
//    b = 10;
//    print b + 400;
//    14;
//  };
//  print b;
//};


//var b = "world!";

//var c = a + b;
//print c;


//var y = 5;
//var z = 10;

//var x = y + z;
//print x;

//var b = 4.1e-2;
//print b;

//var c = 4e-2;
//print c;

//var x = 0;
//print x;

//var t = 100;

// var a = if (x == 0) { 100; } else { 200; };
//var a = if (x == 1)
//  t
//else
//  t + 1
//;

//print a;


//if (x == 1) {
//  x = 10;
//} else {
//  x = 20;
//};

//print x;



// Need to figure out block expressions before doing if expressions
//var t = {
//  var x = 2;
//  print x;
//  10;
//};

//var a = null;
//print a;

//print t;

// statement form
//if (x == 0)
//  return 4;
//else
//  return 10;

//if (expr) stmt [else stmt]

// expression form
//if (x == 0) 4 else 10;

//if (expr) forceExpr [;] [else forceExpr] ;

//forceExpr:
//  expression |
//  statement

//if (expr) expr => if (expr) expr else ();

//if (expr) stmt => if (expr) { stmt } else ();

//def f (x) = if (x == 0) false else true;


//def myfun () =
//  if (x == 0) 4 else 10

//def myfun () =
//  if (expr) (stmt | expr [;]) else (stmt | expr) ;

//  if (expr) stmt else blockExpr ;

//  if (x == 0) true

//impliedBlock ::=
//  statementMinus

//if (x == 0) 1 else 2;

//if (x == 0)
//  1;
//else
//  2;

//if (x == 0) {
//  print 1;
//}
//else {
//  print 2;
//};



//if (x == 0) 1 else { print 2; };

//val z = if(x < 10, 0, 1);

//val z = if(x < 10, { 0; }, { 1; });


//if (x == 0)
//  1;
//else
//  print 2;
//;

//val t = if (x == 0)
//  1
//else
//  2;

//if (x == 0)
//  1;
//else {
//  print 2;
//}
//;


//var t = 120;
//print t;

//while (x < 12) {
//  print x;
//  x = x + 1;
//  var t = 240;
//  print t;
//}

//print t;

//var a = true;
//var b = !true;
//var c = false;
//var d = !false;

//var x = (7 & 5) << 2;
//var y = 12 + 4.5 / 1.25;
//var z = true != false;

// var a = null;

// Test if statement

//if (x < 4)
//  var s = x + 2;
//else if (x > 10)
//  var t = x + 4;
//else
//  var u = x + 6;

// if (a < 10 && b > 5)
//   var s = x + 2;
// else if (t > 10)
//  var t = x + 41;
//else
//  var u = x+1;

// var y = a < 10 || b > 5;

//var x = 5 | 100 & 12 ^ 4;
//4 + 2;
//var y = 1 + 10 / 4;
//return 5;

// var s = x == 4;
// var t = x != 4;

// var x = 1 | true;
//var y = 0 & false;

//var x = (1 + 5) * 4;

// Test unit
//var a = ();

//return ();

// Test 1-tuple
//var b = (2,);

// Test n-tuple
// var c = (2, 4);

// Test imaginary
// var z = 3 + 4j;
// 1 + 2j;
// 15j + 1;

// Test function calls
//var a = foo(x, 4);

// Test array access
//var b = bar[i+5];

// Test object access
//var c = foo.bar;

// Test function call on function object returned from another function call
//var d = foo(x)(y, z);

// Test function call on function object returned from collection
//var e = bar[x](y, z);

// Test function call on function object returned from object
//var f = baz.x(y,z);

// Test unit vs. expressions vs. tuples
// var a = ();
// var b = (s);
// var c = (s,);
// var d = (s, t);
// var e = (s, t,);

// Test arrays
// var a = [];
// var b = [s];
// var c = [s,];
// var d = [s, t];
// var e = [s, t,];

// (x) = expression
// (x,) = tuple
// (x, y) = tuple
// (x) -> x + 1 = lambda function
// (x,) -> x + 1 = lambda function?
// (x, y) -> x + y = lambda function

// For now support no parenthesis for arity-0 only
// Later on might support it with arity-N using '@' notation
// t.foo(x, 4); // seen as function call
// t.foo @(x, 4); // method call foo with tuple argument (using special lexer trick)
// t.foo[x, 4]; // seen as array access
// t.foo @[x, 4]; // method call foo with array argument (using special lexer trick)
// t.foo @{ 'x' => 1, 'y' => z }

// list.each { (x) -> x + 1 }

// var t = myfun { 'apple' => 1, 'banana' => 3 };

//val A = new Matrix([1, 2, 3]);
//val B = mat [1, 2, 3];

// Test alternative function/method calls
// foo(x) --> foo.apply(x)
// foo x --> foo (x) --> foo.apply(x)
// foo --> might only work for methods because this is the function object itself

// Test array access
// foo[x]

// Test object access
// foo.x

//fun strlen (x) = 1;

//while (x)
// var x = 1;

