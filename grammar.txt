NYX GRAMMAR
===========


DECLARATIONS
============

declaration:
  valueDecl
  variableDecl
  functionDecl
  classDecl

# Might eventually change functionDecl body to just be expresion

functionDecl:
  'def' identifier '(' parameters? ')' = (blockExpr | expression ';')

parameters:
  parameter (',' parameter)*

parameter:
  identifier

STATEMENTS
==========

statement:
  expression? ';'


EXPRESSIONS
===========

expression:
  assignmentExpr
  breakExpr
  doExpr
  printExpr
  returnExpr
  whileExpr

assignmentExpr:
  logicalOrExpr ('=' assignmentExpr)?

logicalOrExpr:
  logicalAndExpr ('||' logicalAndExpr)?

logicalAndExpr:
  bitwiseXorExpr ('&&' bitwiseXorExpr)?

bitwiseXorExpr:
  bitwiseOrExpr ('^' bitwiseOrExpr)?

bitwiseOrExpr:
  bitwiseAndExpr ('|' bitwiseAndExpr)?

bitwiseOrExpr:
  equalityExpr ('&' equalityExpr)?

equalityExpr:
  ...

breakExpr:
  'break'

doExpr:
  'do' expression 'while' '(' expression ')'

printExpr:
  'print' expression

returnExpr:
  'return' expression

whileExpr:
  'while' '(' expression ')' expression


blockExpr:
  '{' blockElement* '}'

arrayLiteral:
  '[' arrayElements? ']'

arrayElements:
  expression (',' expression)*

hashLiteral:
  '{' hashElements? '}'




x = [:]

x = {:}

x = [ "one": 1, "two": 2 ]

x = Map({
  one: 1,
  two: 2
});

x = Map(
  "one" -> 1,
  "two" -> 2
);

x = Map();

