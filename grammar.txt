
declaration:
  valueDecl
  variableDecl
  functionDecl
  classDecl

functionDecl:
  'def' identifier '(' parameters? ')' = (blockExpr | expression ';')

parameters:
  parameter (',' parameter)*

parameter:
  identifier

# Use a syntactic predicate here to avoid ';' if last token was '}'

statement:
  expression? ';'

expression:
  assignmentExpr
  printExpr
  returnExpr
  whileExpr

whileExpr:
  'while' '(' expression ')' (blockExpr => <expr blockExpr> | expression)


assignmentExpr:
  blockExpr
  ifExpr


blockExpr:
  '{' blockElement* '}'

arrayLiteral:
  '[' arrayElements? ']'

arrayElements:
  expression (',' expression)*

